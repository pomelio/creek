import std.array as array;
import ext.mustache as mch;
import ext.github as github;
import ext.markdownit as md;
import std.date as dt;
import ext.web as web;
import std.string as str;
import ext.pagwelite as lite;
import ext.squel as sql;

fn render_likes_html(clazz, doc) {

  let doc_likes = lite.list('select * from like where clazz=? and doc=?', [clazz, doc]);

  let count = len(doc_likes);

  let likes_html = [];

  mch.init('/template/creek/like.mustache');

  for (let i = 0; i < count; i++) {
    let like = likes[i];
    let uid = like['user_id'];
    let user = lite.get_by_id('profile', uid);
    let like_html = mch.render();
    array.push(likes_html, like_html);
  }

  let html = array.join(likes_html, '');
  return {html, count};
}

fn render_comments_html(clazz, doc) {
  let comments = lite.list('select * from comment where clazz=? and doc=? order by create_time desc', [clazz, doc]);

  let comments_html = [];

  mch.init_global('/template/comment.mustache');
  let count = len(comments);

  for (let i = 0; i < count; i++) {
    let comment = comments[i];
    let md_comment_result = md.render_source(comment['value']);
    let comment_content = md.get_html(md_comment_result);
    let metas = md.get_metas(md_comment_result);
    let comment_time = dt.from_now(dt.from_number(comment['create_time']));
    let uid = comment['user_id'];
    let user = lite.get_by_id('profile', uid);
    let comment_html = mch.render();
    array.push(comments_html, comment_html);
  }

  let html = array.join(comments_html, '');
  return {html, count};
}

fn get_doc_comments_count(clazz, doc){
    let count_resp = lite.get('select count(*) as len  from comment where clazz=? and doc=?', [clazz, doc]);
    return count_resp['len'];

}

fn get_comment(id) {
  return lite.get_by_id('comment', id);
}

fn save_comment(comment) {
  let id = comment['id'];
  let com = lite.get_by_id('comment', id);
  if com {
    update_comment(comment);
  } else {
    insert_comment(comment);
  }
}

fn insert_comment(comment) {

    sql.insert();
    sql.into('comment');
    sql.set('id', comment['id']);
    sql.set('clazz', comment['clazz']);
    sql.set('doc', comment['doc']);
    sql.set('user_id', comment['user_id']);
    sql.set('value', comment['value']);

    sql.set('create_time', comment['create_time']);

    let sql_text = sql.get_sql_text();
    let sql_values = sql.get_sql_values();
    lite.update(sql_text, sql_values);
}

fn update_comment(comment) {

  sql.update();
  sql.table('comment');
  sql.set('value', comment['value']);
  sql.where('id=?', comment['id']);  

  let sql_text = sql.get_sql_text();
  let sql_values = sql.get_sql_values();
  lite.update(sql_text, sql_values);
}

fn remove_comment(id) {

  sql.delete();
  sql.from('comment');
  sql.where('id=?', [id]);  

  let sql_text = sql.get_sql_text();
  let sql_values = sql.get_sql_values();
  lite.update(sql_text, sql_values);
}

fn render_foot_html(project) {
  let footer_links = [];

  if project['footer']['links'] {
      let f_links = project['footer']['links'];
      let keys = keys(f_links);
      array.for_each(keys, |k| => {
          let title = k;
          let url = f_links[k];
        
          array.push(footer_links, {
              title, url
          });
    });
  }

  return mch.render_global_template('/template/footer.mustache');
}

fn render_sidebar(app) {

    let links = [];

    if app['navi'] {
        let navi = app['navi'];
        let keys = keys(navi);
        array.for_each(keys, |k| => {
            let title = k;
            let url = navi[k];
            let active = false;

            array.push(links, {
                title, url, active
            });
        });
    }

    return mch.render_template('/template/sidebar.mustache');
}


fn get_doc_name(web_path) {

  let fidx = str.last_index_of(web_path, '/');
  if fidx == -1 {
    throw({
      message: 'markdown not found.'
    });
  }
  return str.substring(web_path, fidx + 1);
}

fn get_user(u_id) {
   return lite.get_by_id('profile', u_id);
}

fn list_page_users(page_size, offset) {
    return lite.list('select * from profile order by create_time desc limit ? offset ? ', [page_size, offset]);
}

fn get_users_count() {
    let card_resp = lite.get('select count(*) as len  from profile', []);
    return card_resp['len'];
}